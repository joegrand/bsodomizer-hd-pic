//
// BSODomizer HD
//
// Filename: 	IR_Decoder.h
// Author: 	  Joe Grand [www.grandideastudio.com] and Zoz
//
// Description: IR (NEC/Apple Remote) Decoder header file
//
// Distributed under a Creative Commons Attribution 3.0 United States license
// http://creativecommons.org/licenses/by/3.0/us/ 
//

#include "types.h" /* unified data type definitions */

/*****************************************************************************/
/* DRIVER CONFIGURATION                                                      */
/* ====================                                                      */
/*                                                                           */
/* The following defines need to be defined by the user.                     */
/*                                                                           */
/* The following configuration items are mandatory:                          */
/* - RC5_DATA_PIN:      RC5 input pin                                        */
/* - RC5_TICKS_PER_MS:  RC5 timer ticks per millisecond                      */
/* - RC5_GetTimer():    Macro to get RC5 timer value                         */
/*                                                                           */
/*****************************************************************************/

// RC5 receiver sensor connection
#define RC5_DATA_PIN        RA2
#define RC5_DECODER_TRISx   TRISA2
#define RC5_DECODER_ANSx    ANSA2
#define RC5_DECODER_WPUx    WPUA2
#define RC5_DECODER_IOCxP   IOCAP2
#define RC5_DECODER_IOCxN   IOCAN2
#define RC5_DECODER_IOCxF   IOCAF2

// Timer 0 is configured to increment every 128.0us (i.e. 1000/128 times per ms)
#define RC5_TICKS_PER_MS (1000/128)

// Timer 0 used for time measurement of RC5 signal
#define RC5_GetTimer() TMR0

/**************************************************************************
************************** Typedefs ***************************************
***************************************************************************/

typedef enum	// 7-bit command 
{
  APPLE_UP = 0x05,
  APPLE_DOWN = 0x06,
  APPLE_LEFT = 0x04,
  APPLE_RIGHT = 0x03,
  APPLE_CENTER = 0x02,
  APPLE_MENU = 0x01,

} apple_cmd_type;


/*--- RC5 Decoder data structure ---*/

typedef struct {
    unsigned char toggle;
    unsigned char address;
    unsigned char command;
    unsigned char valid;
} RC5_DECODE;

extern volatile RC5_DECODE RC5_Decode;

/* === C18 compiler specific =============================================== */
/* Note: This driver was written for CCS C compiler. The following macos     */
/*       are required to compile this driver fo CCS C compiler.              */
//#if defined(__18CXX)

/* For C18 compiler the pin configuration must be provided by a config       */
/* header file. This header file must define the #define mentioned in the    */
/* driver configuration information above.                                   */

#ifndef FALSE
#define FALSE	0
#endif

#ifndef TRUE
#define TRUE	(!(FALSE))
#endif

/* bit access marcos */
#define bit_set(value, bitpos)		((value) |= ((uint16)1 << (bitpos)))
#define bit_clear(value, bitpos)	((value) &= (~((uint16)1 << (bitpos))))
#define bit_test(value, bitpos)		((((value) >> (bitpos)) & 0x1) != 0)

/* interrupt enable/disable macros */
#define GLOBAL	0
#define disable_interrupts(x)		GIE = 0 //INTCONbits.GIE = 0
#define enable_interrupts(x)		GIE = 1 //INTCONbits.GIE = 1

/* input pin macro */
#define input(pin)			(pin)

//#endif /* #if defined(__18CXX) */
/* === End C18 compiler specific =========================================== */



/* pin where RC5 signal is connected needs to be configured in RC5_DATA_PIN */
#ifndef RC5_DATA_PIN
#error RC5_DATA_PIN not defined!
#endif

/* number of ticks per ms which are generated by the timer which is used */
/* for RC5 decoding, needs to be defined in RC5_TICKS_PER_MS */
#ifndef RC5_TICKS_PER_MS
#error RC5_TICKS_PER_MS not defined!
#endif

/* function to get current timer value needs to be configured in RC5_GetTimer() */
#ifndef RC5_GetTimer()
#error RC5_GetTimer() not defined!
#endif


/*****************************************************************************/
/* DRIVER INTERNAL DEFINES                                                   */
/* =======================                                                   */
/*                                                                           */
/* Do not change any of this defines.                                        */
/*****************************************************************************/

#define RC5_GetPin()            input(RC5_DATA_PIN)

// timeout time after last NEC interrupt
#define RC5_PREPULSE             ((RC5_TICKS_PER_MS) * 8)
#define RC5_SPACE               ((RC5_TICKS_PER_MS) * 4)
#define RC5_TIMEOUT             ((RC5_TICKS_PER_MS) * 11)
#define RC5_BIT                 ((RC5_TICKS_PER_MS))


/*****************************************************************************/
/* IR_GetCmd                                                                */
/*                                                                           */
/* Extract the command (7 bits) from the full Apple Remote code
/*****************************************************************************/
#define RC5_DECODER_getCmd(rc5code) (rc5code & RC5_MASK_CMD)


void RC5_DECODER_init(void);
bool RC5_DECODER_codeReady(void);
uint16 RC5_DECODER_getCode(void);
void RC5_DECODER_timeoutIncrement(void);
void RC5_DECODER_interruptHandler(void);

/*** FILEHEADER ****************************************************************
 *
 *    FILENAME:    RC5_Decoder.h
 *
 *    DESCRIPTION: RC5 Decoder driver
 *
 ******************************************************************************/

/* unified data type definitions */
#include "types.h"

/*****************************************************************************/
/* DEBUG CONFIGURATION                                                       */
/* ====================                                                      */
//#define _DEBUG_COUT // Enable streaming output of RC5 data to Debugger Console
//#define _DEBUG_UART // Enable UART TXD to send each decoded RC5 data stream

/*****************************************************************************/
/* DRIVER CONFIGURATION                                                      */
/* ====================                                                      */
/*                                                                           */
/* The following defines need to be defined by the user.                     */
/*                                                                           */
/* The following configuration items are mandatory:                          */
/* - RC5_DATA_PIN:      RC5 input pin                                        */
/* - RC5_TICKS_PER_MS:  RC5 timer ticks per millisecond                      */
/* - RC5_GetTimer():    Macro to get RC5 timer value                         */
/*                                                                           */
/* The following configuration items are optional:                           */
/* - RC5_HALF_BIT_TIME_MIN: minimum half bit time in ticks per milliseconds  */
/*                          default:  (((RC5_TICKS_PER_MS) * 700) / 1000)    */
/* - RC5_HALF_BIT_TIME_MAX: maximum half bit time in ticks per milliseconds  */
/*                          default:  (((RC5_TICKS_PER_MS) * 1100) / 1000)   */
/*****************************************************************************/

// RC5 receiver sensor connection
#define RC5_DATA_PIN RA2
#define RC5_DECODER_TRISx TRISA2
#define RC5_DECODER_ANSx ANSA2
#define RC5_DECODER_WPUx WPUA2
#define RC5_DECODER_IOCxP IOCAP2
#define RC5_DECODER_IOCxN IOCAN2
#define RC5_DECODER_IOCxF IOCAF2

// Timer 0 is configured to increment every 32.0us (i.e. 1000/32 times per ms)
#define RC5_TICKS_PER_MS (1000/32)

// Timer 0 used for time measurement of RC5 signal
#define RC5_GetTimer() TMR0

/*--- RC5 Decoder data structure ---*/

typedef struct {
    unsigned char toggle;
    unsigned char address;
    unsigned char command;
    unsigned char valid;
} RC5_DECODE;

extern volatile RC5_DECODE RC5_Decode;

/* === C18 compiler specific =============================================== */
/* Note: This driver was written for CCS C compiler. The following macos     */
/*       are required to compile this driver fo CCS C compiler.              */
//#if defined(__18CXX)

/* For C18 compiler the pin configuration must be provided by a config       */
/* header file. This header file must define the #define mentioned in the    */
/* driver configuration information above.                                   */

#ifndef FALSE
#define FALSE	0
#endif

#ifndef TRUE
#define TRUE	(!(FALSE))
#endif

/* bit access marcos */
#define bit_set(value, bitpos)		((value) |= ((uint16)1 << (bitpos)))
#define bit_clear(value, bitpos)	((value) &= (~((uint16)1 << (bitpos))))
#define bit_test(value, bitpos)		((((value) >> (bitpos)) & 0x1) != 0)

/* interrupt enable/disable macros */
#define GLOBAL	0
#define disable_interrupts(x)		INTCONbits.GIE = 0
#define enable_interrupts(x)		INTCONbits.GIE = 1

/* input pin macro */
#define input(pin)			(pin)

//#endif /* #if defined(__18CXX) */
/* === End C18 compiler specific =========================================== */



/* pin where RC5 signal is connected needs to be configured in RC5_DATA_PIN */
#ifndef RC5_DATA_PIN
#error RC5_DATA_PIN not defined!
#endif

/* number of ticks per ms which are generated by the timer which is used */
/* for RC5 decoding, needs to be defined in RC5_TICKS_PER_MS */
#ifndef RC5_TICKS_PER_MS
#error RC5_TICKS_PER_MS not defined!
#endif

/* function to get current timer value needs to be configured in RC5_GetTimer() */
#ifndef RC5_GetTimer()
#error RC5_GetTimer() not defined!
#endif



/*****************************************************************************/
/* DRIVER INTERNAL DEFINES                                                   */
/* =======================                                                   */
/*                                                                           */
/* Do not change any of this defines.                                        */
/*****************************************************************************/

#define RC5_GetPin()            input(RC5_DATA_PIN)

/* min/max value for a half bit time (min = 700us, max = 1100us) */
#ifndef RC5_HALF_BIT_TIME_MIN
#define RC5_HALF_BIT_TIME_MIN   (((RC5_TICKS_PER_MS) * 700U) / 1000U)
#endif
#ifndef RC5_HALF_BIT_TIME_MAX
#define RC5_HALF_BIT_TIME_MAX   (((RC5_TICKS_PER_MS) * 1100U) / 1000U)
#endif

/* timeout time after last RC5 interrupt (3ms because maximum time between */
/* two edges in a RC5 signal is around 1.8ms */
#define RC5_TIMEOUT             ((RC5_TICKS_PER_MS) * 3)


/* decoding states: */
/* RC5_BIT_STATE_HALF: decoding done until half of a bit */
/* RC5_BIT_STATE_FULL: full bit has been decoded */
#define RC5_BIT_STATE_HALF      0
#define RC5_BIT_STATE_FULL      1

/* RC5 bit positions */
#define RC5_TOGGLE_BIT          11
#define RC5_START_BIT_2         12
#define RC5_START_BIT_1         13

/* RC5 masks */
#define RC5_MASK_CMD            0x003F
#define RC5_MASK_DEVADDR        0x001F


/*****************************************************************************/
/* RC5_GetToggleBit                                                          */
/*                                                                           */
/* Returns the status of the toggle bit.                                     */
/*                                                                           */
/* Return:  TRUE if toggle bit is set, FALSE otherwise.                      */
/*****************************************************************************/
#define RC5_DECODER_getToggleBit(rc5code) bit_test(rc5code, RC5_TOGGLE_BIT)


/*****************************************************************************/
/* RC5_GetDeviceAddr                                                         */
/*                                                                           */
/* Gets the RC5 device address from a full RC5 code.                         */
/*                                                                           */
/* Return:  RC5 device address.                                              */
/*****************************************************************************/
#define RC5_DECODER_getDeviceAddr(rc5code) ((rc5code >> 6) & RC5_MASK_DEVADDR)


/*****************************************************************************/
/* RC5_GetCmd                                                                */
/*                                                                           */
/* Gets the RC5 command from a full RC5 code.                                */
/*                                                                           */
/* Return:  RC5 command.                                                     */
/*****************************************************************************/
#define RC5_DECODER_getCmd(rc5code) (rc5code & RC5_MASK_CMD)

void RC5_DECODER_init(void);

bool RC5_DECODER_codeReady(void);

uint16 RC5_DECODER_getCode(void);

void RC5_DECODER_timeoutIncrement(void);

void RC5_DECODER_interruptHandler(void);
